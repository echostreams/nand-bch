#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "libbch.h"

#include <vector>
#include <iostream>
#include <algorithm>
#include <iomanip>

#include "x_bch/ecclib.h"

using namespace std;

unsigned char test_bin[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x2c, 0x00, 0x00,
  0x00, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe7, 0x2c, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x2c, 0x00, 0x00,
  0x00, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x11, 0x2d, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x2d, 0x00, 0x00,
  0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3b, 0x2d, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x2d, 0x00, 0x00,
  0x00, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x67, 0x2d, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x2d, 0x00, 0x00,
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x93, 0x2d, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x2d, 0x00, 0x00,
  0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x0f, 0x83, 0xb2, 0x68, 0x56, 0xd5, 0xdc, 0x0f, 0xda, 0xf3, 0x35, 0x0b,
  0x8b, 0x9a, 0x3d, 0x88, 0x24, 0x89, 0xe7, 0x97, 0xdb, 0x9a, 0x63, 0x2e, 0x17, 0x10, 0x2c, 0x66,
  0x59, 0x62, 0x8c, 0x16, 0xd6, 0x55, 0x13, 0xa0, 0xd3, 0x2b, 0x9f, 0x9f, 0x24, 0x73, 0x54, 0xc0,
  0xd3, 0x2b, 0x9f, 0x9f, 0x24, 0x73, 0x54, 0xc0, 0xd3, 0x2b, 0x9f, 0x9f, 0x24, 0x73, 0x54, 0xc0
};
unsigned int test_bin_len = 2112;

unsigned char nand_sample_page[] = {
  0x20, 0x54, 0x56, 0x4e, 0x00, 0x02, 0x00, 0x00, 0x4c, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x55, 0xaa, 0x55, 0xaa, 0x32, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x01,
  0x64, 0x02, 0x00, 0xb0, 0x18, 0x00, 0x00, 0xc0, 0x20, 0x02, 0x00, 0xb0, 0x18, 0x00, 0x00, 0x01,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x18, 0x00, 0xb0, 0x30, 0x80, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x00, 0xb0, 0x76, 0x04, 0x03, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x18, 0x00, 0xb0, 0x21, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x18, 0x00, 0xb0, 0x23, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x04, 0x18, 0x00, 0xb0, 0x27, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0x20, 0x18, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x24, 0x18, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0x18, 0x00, 0xb0, 0x00, 0x40, 0x00, 0x00, 0x18, 0x18, 0x00, 0xb0, 0x32, 0x03, 0x00, 0x00,
  0x10, 0x18, 0x00, 0xb0, 0x06, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0xb0, 0x27, 0x00, 0x00, 0x00,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
  0xaa, 0x55, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0xb0, 0x2b, 0x00, 0x00, 0x00,
  0x04, 0x18, 0x00, 0xb0, 0x2b, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0xb0, 0x2b, 0x00, 0x00, 0x00,
  0x18, 0x18, 0x00, 0xb0, 0x32, 0x02, 0x00, 0x00, 0x1c, 0x18, 0x00, 0xb0, 0x81, 0x47, 0x00, 0x00,
  0x1c, 0x18, 0x00, 0xb0, 0x01, 0x44, 0x00, 0x00, 0x04, 0x18, 0x00, 0xb0, 0x20, 0x00, 0x00, 0x00,
  0x34, 0x18, 0x00, 0xb0, 0x20, 0x88, 0x88, 0x00, 0x18, 0x02, 0x00, 0xb0, 0x08, 0x00, 0x00, 0x00,
  0xa0, 0x30, 0x00, 0xb8, 0xff, 0x7f, 0x00, 0x00, 0xe0, 0x30, 0x00, 0xb8, 0x00, 0xff, 0x00, 0x00,
  0x20, 0x31, 0x00, 0xb8, 0xfc, 0xff, 0x00, 0x00, 0x60, 0x31, 0x00, 0xb8, 0x00, 0xf8, 0x00, 0x00,
  0xa0, 0x31, 0x00, 0xb8, 0x3c, 0x80, 0x00, 0x00, 0xe0, 0x31, 0x00, 0xb8, 0x7c, 0xff, 0x00, 0x00,
  0x20, 0x32, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00,
  0x2c, 0x02, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x2c, 0x02, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00,
  0x2c, 0x02, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0xea, 0x14, 0xf0, 0x9f, 0xe5, 0x14, 0xf0, 0x9f, 0xe5, 0x14, 0xf0, 0x9f, 0xe5,
  0x14, 0xf0, 0x9f, 0xe5, 0x14, 0xf0, 0x9f, 0xe5, 0x14, 0xf0, 0x9f, 0xe5, 0x14, 0xf0, 0x9f, 0xe5,
  0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
  0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
  0xfe, 0xff, 0xff, 0xeb, 0x00, 0x00, 0xa0, 0xe1, 0x00, 0x00, 0xa0, 0xe1, 0x00, 0x00, 0xa0, 0xe1,
  0x00, 0x00, 0xa0, 0xe1, 0x00, 0x00, 0xa0, 0xe1, 0x00, 0x00, 0xa0, 0xe1, 0x00, 0x00, 0xa0, 0xe1,
  0x00, 0x00, 0x0f, 0xe1, 0x1f, 0x00, 0xc0, 0xe3, 0xd3, 0x00, 0x80, 0xe3, 0x00, 0xf0, 0x29, 0xe1,
  0x01, 0x00, 0x00, 0xeb, 0x10, 0x00, 0x00, 0xeb, 0x1e, 0xff, 0x2f, 0xe1, 0x00, 0x00, 0xa0, 0xe3,
  0x7a, 0xff, 0x17, 0xee, 0xfd, 0xff, 0xff, 0x1a, 0x17, 0x0f, 0x08, 0xee, 0x15, 0x0f, 0x07, 0xee,
  0x10, 0x0f, 0x11, 0xee, 0x03, 0x0c, 0xc0, 0xe3, 0x87, 0x00, 0xc0, 0xe3, 0x02, 0x0a, 0xc0, 0xe3,
  0x02, 0x00, 0x80, 0xe3, 0x01, 0x0a, 0x80, 0xe3, 0x10, 0x0f, 0x01, 0xee, 0x0e, 0xc0, 0xa0, 0xe1,
  0x65, 0x00, 0x00, 0xeb, 0x0c, 0xe0, 0xa0, 0xe1, 0x0e, 0xf0, 0xa0, 0xe1, 0x1c, 0xd0, 0x9f, 0xe5,
  0x07, 0xd0, 0xcd, 0xe3, 0x0d, 0x00, 0xa0, 0xe1, 0x1e, 0x09, 0x00, 0xeb, 0x00, 0xd0, 0xa0, 0xe1,
  0x00, 0x90, 0xa0, 0xe1, 0x1e, 0x09, 0x00, 0xeb, 0x00, 0x00, 0xa0, 0xe3, 0x00, 0x00, 0x00, 0xeb,
  0x00, 0x80, 0x00, 0xbc, 0xf7, 0x45, 0x2d, 0xe9, 0x0e, 0x08, 0x00, 0xeb, 0x48, 0x41, 0x9f, 0xe5,
  0x48, 0x01, 0x9f, 0xe5, 0x34, 0x08, 0x00, 0xeb, 0x44, 0x31, 0x9f, 0xe5, 0x04, 0x00, 0xa0, 0xe1,
  0xd4, 0x30, 0x84, 0xe5, 0xd0, 0x30, 0x84, 0xe5, 0x29, 0x06, 0x00, 0xeb, 0x00, 0x50, 0x50, 0xe2,
  0x47, 0x00, 0x00, 0x1a, 0x01, 0x10, 0xa0, 0xe3, 0x04, 0x00, 0xa0, 0xe1, 0x15, 0x04, 0x00, 0xeb,
  0x04, 0x00, 0xa0, 0xe1, 0xc4, 0x06, 0x00, 0xeb, 0x05, 0x00, 0xa0, 0xe1, 0x04, 0x10, 0xa0, 0xe1,
  0x4f, 0x07, 0x00, 0xeb, 0x10, 0x60, 0x94, 0xe5, 0x14, 0x80, 0x94, 0xe5, 0x06, 0x00, 0xa0, 0xe1,
  0x08, 0x10, 0xa0, 0xe1, 0x08, 0x09, 0x00, 0xeb, 0x06, 0x10, 0xa0, 0xe1, 0x00, 0xa0, 0xa0, 0xe1,
  0x01, 0x06, 0xa0, 0xe3, 0x04, 0x09, 0x00, 0xeb, 0x06, 0x10, 0xa0, 0xe1, 0x00, 0x50, 0xa0, 0xe1,
  0xe0, 0x00, 0x9f, 0xe5, 0x00, 0x09, 0x00, 0xeb, 0x06, 0x10, 0xa0, 0xe1, 0x00, 0x70, 0xa0, 0xe1,
  0x01, 0x06, 0xa0, 0xe3, 0x56, 0x09, 0x00, 0xeb, 0x01, 0x00, 0xa0, 0xe1, 0x08, 0x10, 0xa0, 0xe1,
  0xf9, 0x08, 0x00, 0xeb, 0x0e, 0x86, 0xa0, 0xe3, 0x00, 0x60, 0xa0, 0xe1, 0x07, 0x00, 0x55, 0xe1,
  0x1f, 0x00, 0x00, 0x8a, 0x14, 0x10, 0x94, 0xe5, 0x10, 0x00, 0x94, 0xe5, 0xf2, 0x08, 0x00, 0xeb,
  0x50, 0x10, 0xa0, 0xe3, 0x00, 0x20, 0xa0, 0xe3, 0x90, 0x05, 0x03, 0xe0, 0x88, 0x00, 0x9f, 0xe5,
  0x04, 0x04, 0x00, 0xeb, 0x80, 0x00, 0x9f, 0xe5, 0x67, 0x04, 0x00, 0xeb, 0xff, 0x00, 0x50, 0xe3,
  0x01, 0x70, 0x87, 0x12, 0x10, 0x00, 0x00, 0x1a, 0x0a, 0x00, 0x56, 0xe1, 0x0d, 0x00, 0x00, 0x2a,
  0x14, 0x10, 0x94, 0xe5, 0x10, 0x00, 0x94, 0xe5, 0xe3, 0x08, 0x00, 0xeb, 0x08, 0x20, 0xa0, 0xe1,
  0x00, 0x30, 0xa0, 0xe3, 0x95, 0x60, 0x20, 0xe0, 0x01, 0x60, 0x86, 0xe2, 0x00, 0x00, 0x8d, 0xe5,
  0x44, 0x00, 0x9f, 0xe5, 0x00, 0x10, 0xa0, 0xe1, 0x6c, 0x05, 0x00, 0xeb, 0x14, 0x30, 0x94, 0xe5,
  0x03, 0x80, 0x88, 0xe0, 0xef, 0xff, 0xff, 0xea, 0x00, 0x60, 0xa0, 0xe3, 0x01, 0x50, 0x85, 0xe2,
  0xdd, 0xff, 0xff, 0xea, 0xf0, 0x30, 0x94, 0xe5, 0x00, 0x00, 0x53, 0xe3, 0x02, 0x00, 0x00, 0x0a,
  0x14, 0x00, 0x9f, 0xe5, 0x00, 0x10, 0xe0, 0xe3, 0x33, 0xff, 0x2f, 0xe1, 0x0e, 0x36, 0xa0, 0xe3,
  0x33, 0xff, 0x2f, 0xe1, 0x0c, 0xd0, 0x8d, 0xe2, 0xf0, 0x85, 0xbd, 0xe8, 0x50, 0x42, 0x00, 0x00,
  0x94, 0x29, 0x00, 0x00, 0x00, 0xd0, 0x00, 0xb0, 0xff, 0xcf, 0x17, 0x00, 0x1e, 0xff, 0x2f, 0xe1,
  0xd0, 0x30, 0x90, 0xe5, 0x00, 0x00, 0xd3, 0xe5, 0xff, 0x00, 0x00, 0xe2, 0x1e, 0xff, 0x2f, 0xe1,
  0xd0, 0x30, 0x90, 0xe5, 0xb0, 0x00, 0xd3, 0xe1, 0xff, 0x00, 0x00, 0xe2, 0x1e, 0xff, 0x2f, 0xe1,
  0xd0, 0x30, 0x90, 0xe5, 0xb0, 0x00, 0xd3, 0xe1, 0x1e, 0xff, 0x2f, 0xe1, 0xd0, 0x00, 0x90, 0xe5,
  0x00, 0x30, 0xa0, 0xe3, 0x02, 0x00, 0x53, 0xe1, 0x04, 0x00, 0x00, 0xaa, 0x00, 0xc0, 0xd0, 0xe5,
  0xff, 0xc0, 0x0c, 0xe2, 0x03, 0xc0, 0xc1, 0xe7, 0x01, 0x30, 0x83, 0xe2, 0xf8, 0xff, 0xff, 0xea,
  0x1e, 0xff, 0x2f, 0xe1, 0xd0, 0x00, 0x90, 0xe5, 0xc2, 0x20, 0xa0, 0xe1, 0x00, 0x30, 0xa0, 0xe3,
  0x10, 0x40, 0x2d, 0xe9, 0x02, 0x00, 0x53, 0xe1, 0x04, 0x00, 0x00, 0xaa, 0xb0, 0x40, 0xd0, 0xe1,
  0x83, 0xc0, 0xa0, 0xe1, 0xbc, 0x40, 0x81, 0xe1, 0x01, 0x30, 0x83, 0xe2, 0xf8, 0xff, 0xff, 0xea,
  0x10, 0x80, 0xbd, 0xe8, 0xff, 0x4d, 0x2d, 0xe9, 0x01, 0x40, 0xa0, 0xe1, 0xf0, 0xa4, 0x94, 0xe5,
  0x02, 0x60, 0xa0, 0xe1, 0x1a, 0x3d, 0x8a, 0xe2, 0x08, 0x30, 0x8d, 0xe5, 0xb4, 0x34, 0x94, 0xe5,
  0x94, 0x84, 0x94, 0xe5, 0x98, 0x14, 0x91, 0xe5, 0x9c, 0x24, 0x94, 0xe5, 0x04, 0x30, 0x83, 0xe2,
  0x00, 0x50, 0xa0, 0xe1, 0x0a, 0xb0, 0xa0, 0xe1, 0x06, 0x70, 0xa0, 0xe1, 0x00, 0x10, 0x8d, 0xe5,
  0x04, 0x20, 0x8d, 0xe5, 0x0c, 0x30, 0x8d, 0xe5, 0x00, 0x00, 0x58, 0xe3, 0x13, 0x00, 0x00, 0x0a,
  0xbc, 0x34, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x00, 0x10, 0xa0, 0xe3, 0x33, 0xff, 0x2f, 0xe1,
  0x07, 0x10, 0xa0, 0xe1, 0xec, 0x30, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x00, 0x20, 0x9d, 0xe5,
  0x33, 0xff, 0x2f, 0xe1, 0x07, 0x10, 0xa0, 0xe1, 0x0b, 0x20, 0xa0, 0xe1, 0xc0, 0x34, 0x94, 0xe5,
  0x05, 0x00, 0xa0, 0xe1, 0x33, 0xff, 0x2f, 0xe1, 0x00, 0x10, 0x9d, 0xe5, 0x04, 0x20, 0x9d, 0xe5,
  0x01, 0x80, 0x48, 0xe2, 0x01, 0x70, 0x87, 0xe0, 0x02, 0xb0, 0x8b, 0xe0, 0xe9, 0xff, 0xff, 0xea,
  0xec, 0x30, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x84, 0x14, 0x94, 0xe5, 0x1c, 0x20, 0x95, 0xe5,
  0x33, 0xff, 0x2f, 0xe1, 0xa0, 0x34, 0x94, 0xe5, 0x03, 0x00, 0x58, 0xe1, 0x07, 0x00, 0x00, 0xaa,
  0x0c, 0x10, 0x9d, 0xe5, 0x84, 0x24, 0x94, 0xe5, 0x08, 0x31, 0x91, 0xe7, 0x03, 0x30, 0xd2, 0xe7,
  0x08, 0x20, 0x9d, 0xe5, 0x08, 0x30, 0xc2, 0xe7, 0x01, 0x80, 0x88, 0xe2, 0xf4, 0xff, 0xff, 0xea,
  0x00, 0x70, 0xa0, 0xe3, 0x94, 0xb4, 0x94, 0xe5, 0x07, 0x80, 0xa0, 0xe1, 0x00, 0x00, 0x5b, 0xe3,
  0x16, 0x00, 0x00, 0x0a, 0x08, 0x30, 0x9d, 0xe5, 0xc4, 0xc4, 0x94, 0xe5, 0x08, 0x20, 0x83, 0xe0,
  0x05, 0x00, 0xa0, 0xe1, 0x08, 0x30, 0x8a, 0xe0, 0x06, 0x10, 0xa0, 0xe1, 0x3c, 0xff, 0x2f, 0xe1,
  0x00, 0x00, 0x50, 0xe3, 0xb0, 0x30, 0x95, 0xb5, 0x01, 0x30, 0x83, 0xb2, 0xb0, 0x30, 0x85, 0xb5,
  0x04, 0x00, 0x00, 0xba, 0xac, 0x30, 0x95, 0xe5, 0x00, 0x00, 0x57, 0xe1, 0x00, 0x70, 0xa0, 0x31,
  0x00, 0x30, 0x83, 0xe0, 0xac, 0x30, 0x85, 0xe5, 0x04, 0x10, 0x9d, 0xe5, 0x00, 0x20, 0x9d, 0xe5,
  0x01, 0xb0, 0x4b, 0xe2, 0x01, 0x80, 0x88, 0xe0, 0x02, 0x60, 0x86, 0xe0, 0xe6, 0xff, 0xff, 0xea,
  0x07, 0x00, 0xa0, 0xe1, 0x10, 0xd0, 0x8d, 0xe2, 0xf0, 0x8d, 0xbd, 0xe8, 0x98, 0xc4, 0x91, 0xe5,
  0xff, 0x4d, 0x2d, 0xe9, 0x04, 0xc0, 0x8d, 0xe5, 0x9c, 0xc4, 0x91, 0xe5, 0x30, 0x70, 0x9d, 0xe5,
  0x0c, 0xc0, 0x8d, 0xe5, 0xf0, 0xc4, 0x91, 0xe5, 0x00, 0x50, 0xa0, 0xe1, 0x01, 0x40, 0xa0, 0xe1,
  0xb4, 0x84, 0x91, 0xe5, 0x94, 0xa4, 0x91, 0xe5, 0x08, 0xc0, 0x8d, 0xe5, 0x07, 0x30, 0xa0, 0xe1,
  0x02, 0x60, 0xa0, 0xe1, 0x1a, 0xbd, 0x8c, 0xe2, 0x00, 0x20, 0xa0, 0xe3, 0x04, 0xc1, 0x91, 0xe5,
  0x50, 0x10, 0xa0, 0xe3, 0x3c, 0xff, 0x2f, 0xe1, 0xec, 0x30, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1,
  0x84, 0x14, 0x94, 0xe5, 0x1c, 0x20, 0x95, 0xe5, 0x33, 0xff, 0x2f, 0xe1, 0x00, 0x10, 0xa0, 0xe3,
  0x07, 0x30, 0xa0, 0xe1, 0x04, 0xc1, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x01, 0x20, 0xa0, 0xe1,
  0x3c, 0xff, 0x2f, 0xe1, 0x04, 0x80, 0x88, 0xe2, 0x00, 0x30, 0xa0, 0xe3, 0xa0, 0x24, 0x94, 0xe5,
  0x02, 0x00, 0x53, 0xe1, 0x05, 0x00, 0x00, 0xaa, 0x03, 0x21, 0x98, 0xe7, 0x84, 0x14, 0x94, 0xe5,
  0x02, 0x20, 0xd1, 0xe7, 0x03, 0x20, 0xcb, 0xe7, 0x01, 0x30, 0x83, 0xe2, 0xf6, 0xff, 0xff, 0xea,
  0x00, 0x80, 0xa0, 0xe3, 0x08, 0x70, 0xa0, 0xe1, 0x00, 0x00, 0x5a, 0xe3, 0x24, 0x00, 0x00, 0x0a,
  0xbc, 0x34, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x00, 0x10, 0xa0, 0xe3, 0x33, 0xff, 0x2f, 0xe1,
  0xec, 0x30, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x06, 0x10, 0xa0, 0xe1, 0x04, 0x20, 0x9d, 0xe5,
  0x33, 0xff, 0x2f, 0xe1, 0x08, 0xc0, 0x9d, 0xe5, 0xc0, 0x34, 0x94, 0xe5, 0x07, 0x20, 0x8c, 0xe0,
  0x06, 0x10, 0xa0, 0xe1, 0x05, 0x00, 0xa0, 0xe1, 0x33, 0xff, 0x2f, 0xe1, 0x00, 0x30, 0xa0, 0xe3,
  0xc4, 0xc4, 0x94, 0xe5, 0x05, 0x00, 0xa0, 0xe1, 0x06, 0x10, 0xa0, 0xe1, 0x07, 0x20, 0x8b, 0xe0,
  0x3c, 0xff, 0x2f, 0xe1, 0x00, 0x00, 0x50, 0xe3, 0xb0, 0x30, 0x95, 0xb5, 0x01, 0x30, 0x83, 0xb2,
  0xb0, 0x30, 0x85, 0xb5, 0x04, 0x00, 0x00, 0xba, 0xac, 0x30, 0x95, 0xe5, 0x00, 0x00, 0x58, 0xe1,
  0x00, 0x80, 0xa0, 0x31, 0x00, 0x30, 0x83, 0xe0, 0xac, 0x30, 0x85, 0xe5, 0x0c, 0xc0, 0x9d, 0xe5,
  0x01, 0xa0, 0x4a, 0xe2, 0x0c, 0x70, 0x87, 0xe0, 0x04, 0xc0, 0x9d, 0xe5, 0x0c, 0x60, 0x86, 0xe0,
  0xd8, 0xff, 0xff, 0xea, 0x08, 0x00, 0xa0, 0xe1, 0x10, 0xd0, 0x8d, 0xe2, 0xf0, 0x8d, 0xbd, 0xe8,
  0x28, 0x31, 0x90, 0xe5, 0x00, 0x00, 0x53, 0xe3, 0x14, 0x30, 0xa0, 0x03, 0x28, 0x31, 0x80, 0x05,
  0xf0, 0x30, 0x90, 0xe5, 0x00, 0x00, 0x53, 0xe3, 0x84, 0x30, 0x9f, 0x05, 0xf0, 0x30, 0x80, 0x05,
  0xdc, 0x30, 0x90, 0xe5, 0x00, 0x00, 0x53, 0xe3, 0x02, 0x00, 0x00, 0x0a, 0x74, 0x20, 0x9f, 0xe5,
  0x02, 0x00, 0x53, 0xe1, 0x04, 0x00, 0x00, 0x1a, 0x68, 0x20, 0x9f, 0xe5, 0x00, 0x00, 0x51, 0xe3,
  0x64, 0x30, 0x9f, 0xe5, 0x02, 0x30, 0xa0, 0x01, 0xdc, 0x30, 0x80, 0xe5, 0xe0, 0x30, 0x90, 0xe5,
  0x00, 0x00, 0x53, 0xe3, 0x54, 0x30, 0x9f, 0x05, 0xe0, 0x30, 0x80, 0x05, 0xec, 0x30, 0x90, 0xe5,
  0x00, 0x00, 0x53, 0xe3, 0x02, 0x00, 0x00, 0x0a, 0x44, 0x20, 0x9f, 0xe5, 0x02, 0x00, 0x53, 0xe1,
  0x05, 0x00, 0x00, 0x1a, 0x3c, 0x30, 0x9f, 0xe5, 0x34, 0x20, 0x9f, 0xe5, 0x00, 0x00, 0x51, 0xe3,
  0x02, 0x10, 0xa0, 0x01, 0x03, 0x10, 0xa0, 0x11, 0xec, 0x10, 0x80, 0xe5, 0x88, 0x34, 0x90, 0xe5,
  0x00, 0x00, 0x53, 0xe3, 0x4f, 0x3e, 0x80, 0x02, 0x04, 0x30, 0x83, 0x02, 0x88, 0x34, 0x80, 0x05,
  0x1e, 0xff, 0x2f, 0xe1, 0x3c, 0x08, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
  0x70, 0x04, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0xa4, 0x04, 0x00, 0x00, 0x01, 0x00, 0x71, 0xe3,
  0x08, 0x40, 0x2d, 0xe9, 0x02, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x51, 0xe3, 0x08, 0x80, 0xbd, 0x08
};

unsigned char nand_sample_oob[64] = {
  0xff, 0xff, 0x00, 0x00, 0x0f, 0x83, 0xb2, 0x68,
  0x56, 0xd5, 0xdc, 0x0f, 0xda, 0xf3, 0x35, 0x0b,
  0x8b, 0x9a, 0x3d, 0x88, 0x24, 0x89, 0xe7, 0x97,
  0xdb, 0x9a, 0x63, 0x2e, 0x17, 0x10, 0x2c, 0x66,
  0xea, 0x9a, 0x3d, 0xd3, 0x94, 0xf8, 0xe4, 0x90,
  0x7e, 0xa2, 0xa8, 0x25, 0x90, 0xcb, 0xcf, 0x90,
  0xc4, 0xa3, 0xda, 0xa1, 0x5e, 0xda, 0x3a, 0xb0,
  0xed, 0xff, 0x5e, 0xb0, 0x5b, 0xea, 0x1c, 0xc0
};

#define BCH_T 4
#define BCH_N 15
#define SECTOR_SZ 512
#define OOB_SZ 16
#define SECTORS_PER_PAGE 4
#define OOB_ECC_OFS 8
#define OOB_ECC_LEN 8
#define OOB_SIZE 64
#define ECC_POS	 32

unsigned char test_sector[2048];
unsigned char test_data[] = { 
	0x0f, 0x83, 0xb2, 0x68,
	0x56, 0xd5, 0xdc, 0x0f, 
	0xda, 0xf3, 0x35, 0x0b,
	0x8b, 0x9a, 0x3d, 0x88, 
	0x24, 0x89, 0xe7, 0x97,
	0xdb, 0x9a, 0x63, 0x2e, 
	0x17, 0x10, 0x2c, 0x66 };

unsigned char test2_bin[] = {
  0x24, 0xac, 0xa8, 0x48, 0x81, 0x7a, 0x91, 0x03, 0x90, 0x6b, 0x21, 0x21, 0xc6, 0x6a, 0x0f, 0x8d,
  0xb0, 0xde, 0x9d, 0x60, 0xb1, 0x99, 0xfb, 0x62, 0xa6, 0x21, 0x43, 0x4d, 0x48, 0x4a, 0xec, 0x91,
  0x80, 0xc7, 0xcf, 0x00, 0xb0, 0xb3, 0xeb, 0x60, 0x6e, 0x8f, 0xc4, 0xdc, 0xbc, 0xb3, 0xb1, 0x78,
  0xb7, 0xea, 0x2b, 0x6e, 0x31, 0xef, 0xb4, 0x62, 0x9f, 0x97, 0xbf, 0x3e, 0x63, 0x24, 0xec, 0xc7,
  0xa3, 0x21, 0xef, 0x47, 0x55, 0x4b, 0xc8, 0xab, 0xa7, 0xef, 0xf5, 0x4e, 0xee, 0x4e, 0x4b, 0xdd,
  0x48, 0x6b, 0x4c, 0x91, 0xf1, 0xdb, 0x37, 0xe2, 0x4f, 0x96, 0x0c, 0x9e, 0x73, 0x69, 0x6e, 0xe7,
  0x17, 0x5e, 0x00, 0x2f, 0xa3, 0x72, 0x53, 0x47, 0x3a, 0x92, 0x1a, 0x74, 0xbd, 0x14, 0x71, 0x7b,
  0xb4, 0x1a, 0xd5, 0x69, 0xa6, 0x64, 0xe5, 0x4d, 0xc6, 0x46, 0xf7, 0x8d, 0x50, 0xe1, 0xce, 0xa0,
  0x01, 0x44, 0xdc, 0x03, 0x04, 0x84, 0x26, 0x08, 0x55, 0xa2, 0x1e, 0xaa, 0xb9, 0x33, 0x33, 0x73,
  0x69, 0x7c, 0x04, 0xd3, 0xc8, 0x1d, 0xc1, 0x91, 0xb0, 0x1c, 0x3d, 0x61, 0xca, 0x6b, 0xe5, 0x95,
  0xd6, 0xbb, 0xf9, 0xac, 0xab, 0x54, 0x65, 0x57, 0x40, 0x52, 0xe8, 0x81, 0x75, 0x7c, 0x6a, 0xeb,
  0xb8, 0x97, 0xff, 0x70, 0xf3, 0x4e, 0xa3, 0xe7, 0xc4, 0x92, 0x21, 0x88, 0x50, 0xa6, 0x90, 0xa0,
  0x53, 0x50, 0xce, 0xa7, 0x3c, 0x32, 0x8c, 0x79, 0x4f, 0xbd, 0x16, 0x9e, 0x51, 0x86, 0x74, 0xa2,
  0x82, 0xcd, 0x23, 0x04, 0x1b, 0x2c, 0xd2, 0x37, 0x1e, 0xcf, 0x04, 0x3c, 0x91, 0x48, 0x51, 0x23,
  0xd7, 0xb0, 0xa3, 0xae, 0x6d, 0xa6, 0x40, 0xda, 0x63, 0x9f, 0xd2, 0xc6, 0x75, 0xc8, 0xa8, 0xea,
  0x3d, 0x40, 0xae, 0x7b, 0x54, 0xbb, 0xf0, 0xa8, 0xd0, 0x59, 0xeb, 0xa1, 0x8e, 0x7d, 0xe9, 0x1d,
  0xa1, 0x82, 0x4f, 0x42, 0xf2, 0xaa, 0x4f, 0xe4, 0xdc, 0x06, 0x33, 0xb9, 0x5c, 0xcc, 0x60, 0xb8,
  0x7e, 0x4c, 0xc4, 0xfd, 0xa8, 0xd2, 0x55, 0x50, 0x8f, 0xd9, 0x9b, 0x1e, 0x9b, 0xd2, 0x39, 0x36,
  0x46, 0xe0, 0xc4, 0x8c, 0x32, 0xdf, 0xac, 0x64, 0xf9, 0xaa, 0x85, 0xf2, 0xf1, 0x85, 0x9d, 0xe2,
  0x1f, 0x95, 0xb6, 0x3e, 0xed, 0x06, 0xb3, 0xdb, 0xf9, 0x6a, 0x23, 0xf3, 0x3a, 0x29, 0xbe, 0x75,
  0xda, 0x03, 0xd3, 0xb5, 0x91, 0xec, 0x7b, 0x22, 0x92, 0x4c, 0x75, 0x25, 0x0b, 0x7c, 0xc4, 0x17,
  0xeb, 0x03, 0x7f, 0xd7, 0x8a, 0x3f, 0xe3, 0x15, 0x69, 0xf4, 0x84, 0xd2, 0x30, 0xfe, 0xb8, 0x60,
  0x43, 0x73, 0x34, 0x87, 0x13, 0xb7, 0xea, 0x26, 0xee, 0x5a, 0x41, 0xdd, 0xbc, 0xb7, 0x4f, 0x78,
  0x48, 0xdb, 0x30, 0x90, 0x7e, 0x00, 0xa0, 0xfd, 0xb6, 0x81, 0xa7, 0x6c, 0x9c, 0xe7, 0x9b, 0x38,
  0xf8, 0xf1, 0x4b, 0xf0, 0xcb, 0x6f, 0xd7, 0x97, 0xa1, 0xf4, 0x9b, 0x42, 0x1e, 0x11, 0x28, 0x3d,
  0xda, 0x9a, 0x5b, 0xb4, 0x92, 0xd2, 0xd1, 0x24, 0xfc, 0x75, 0x4f, 0xf9, 0x54, 0xf5, 0x30, 0xa8,
  0x1a, 0xc6, 0xa8, 0x34, 0x61, 0x1c, 0xfc, 0xc3, 0x71, 0x30, 0x58, 0xe3, 0x39, 0x4f, 0xf4, 0x73,
  0x5f, 0x99, 0xac, 0xbe, 0x64, 0x3d, 0xbe, 0xc9, 0xce, 0xe8, 0x69, 0x9c, 0xc5, 0x2d, 0xd1, 0x8b,
  0xf4, 0x15, 0x99, 0xe9, 0xcd, 0x49, 0x4b, 0x9b, 0xfa, 0x6a, 0x1b, 0xf5, 0x22, 0xb0, 0x94, 0x44,
  0xef, 0xbf, 0x1f, 0xde, 0xd3, 0x6c, 0xd9, 0xa7, 0x67, 0x58, 0x90, 0xcf, 0x5a, 0xdb, 0x14, 0xb4,
  0x94, 0x83, 0xf3, 0x28, 0xb7, 0x47, 0x41, 0x6f, 0x5b, 0x36, 0xca, 0xb7, 0xa6, 0x6d, 0xf9, 0x4d,
  0xad, 0x47, 0x51, 0x5b, 0xfb, 0x29, 0x7d, 0xf7, 0x9e, 0x98, 0x8f, 0x3c, 0x22, 0xff, 0x8c, 0x44,
  0x24, 0xa2, 0x6b, 0x4d, 0x5b
};
unsigned int test2_bin_len = 517;

/*-----------------------------------------------------------------------------------*
 * Definition for self-defined Macro.
 *-----------------------------------------------------------------------------------*/
#define OK      0
#define FAIL    -1

#define TRUE    1
#define FALSE   0

#define Successful  0
#define Fail        -1

 /*-----------------------------------------------------------------------------------*
  * Definition the global variables
  *-----------------------------------------------------------------------------------*/
unsigned char   gPage_buf[8192];    // buffer for a page of data
unsigned char   gRa_buf[512];       // buffer for redundancy area
unsigned long   gChecksum = 0;      // 32 bits checksum for all output data

/*-----------------------------------------------------------------------------
 * calculate 32 bits checksum for data
 * INPUT:
 *      data   : pointer to data.
 *      length : byte number of data.
 *      current_checksum : the current checksum for data that had calculated.
 * RETURN:
 *      final checksum value.
 *---------------------------------------------------------------------------*/
unsigned long calculate_checksum(unsigned char* data, int length, unsigned long current_checksum)
{
    int i;

    for (i = 0; i < length; i++)
        current_checksum = (current_checksum + data[i]) & 0xFFFFFFFF;
    return current_checksum;
}

extern "C" {
    int calculate_BCH_parity_in_field(
        unsigned char* input_data,
        unsigned char* input_ra_data,
        int bch_error_bits,
        int protect_3B,
        int field_index,
        unsigned char* output_bch_parity,
        int bch_need_initial);
}

/*-----------------------------------------------------------------------------
 * calculate BCH parity code for a page of data
 * INPUT:
 *      fdout : file pointer for output file
 *      block / page : the block index and page index of raw data
 *      raw_data : pointer to a page of raw data
 *      bch_need_initial : TRUE to initial BCH if the BCH configuration is changed.
 * 		ra_size: the oob size.
 * OUTPUT:
 *      ra_data : pointer to the buffer for a page of BCH parity code
 *---------------------------------------------------------------------------*/
int calculate_BCH_parity(
    //GOLDEN_INFO_T* psgoldeninfo,
    //IMG_INFO_T* psImgInfo,
    int page_size,
    int oob_size,
    int err_bits,
    //FILE* fdout,
    int block, int page,
    unsigned char* raw_data,
    unsigned char* ra_data,
    int bch_need_initial)
{
    int field_index, field_parity_size, field_size, field_count;
    int protect_3B;
    int bch_error_bits, nvt_ra_size;
    int result;
    unsigned char bch_parity_buffer[512];
    unsigned char* parity_location_in_ra;

    //if (psImgInfo->m_i32OOBSize == 0)
    //    return OK;

    memset(ra_data, 0xFF, oob_size);

    if (block < 4) // first four blocks is system area
    {
        ra_data[0] = 0xFF;
        ra_data[1] = 0x5A;
        ra_data[2] = page & 0xFF;
        ra_data[3] = 0x00;
    }
    else
    {
        ra_data[0] = 0xFF;
        ra_data[1] = 0xFF;
        ra_data[2] = 0x00;
        ra_data[3] = 0x00;
    }
    bch_error_bits = err_bits;
    //nvt_ra_size = g_i32ParityNum[psgoldeninfo->m_ePageSize][psImgInfo->m_eBCHAlgorithm];
    //nvt_ra_size = psgoldeninfo->m_i32OOBSize ;
    nvt_ra_size = oob_size;

    switch (bch_error_bits)
    {
    case  4:
        field_size = 512;
        break;
    case  8:
        field_size = 512;
        break;
    case 12:
        field_size = 512;
        break;
    case 15:
        field_size = 512;
        break;
    case 24:
        field_size = 1024;
        break;
    default:
        printf("ERROR: BCH T must be 4 or 8 or 12 or 15 or 24.\n\n");
        return FAIL;
    }

    field_count = page_size / field_size;
    for (field_index = 0; field_index < field_count; field_index++)
    {
        if (field_index == 0)
            protect_3B = TRUE;  // BCH protect 3 bytes only for field 0
        else
        {
            protect_3B = FALSE;
            bch_need_initial = FALSE;   // BCH engine only need to initial once. So, initial it only for field 0.
        }

        field_parity_size = calculate_BCH_parity_in_field(
            raw_data + field_index * field_size, ra_data,
            bch_error_bits, protect_3B, field_index, bch_parity_buffer, bch_need_initial);
        parity_location_in_ra = ra_data + nvt_ra_size - (field_parity_size * field_count) + (field_parity_size * field_index);
        memcpy(parity_location_in_ra, bch_parity_buffer, field_parity_size);
    }

#if 1
    //Wayne
    {
        int i = 0;
        //printf("bch_error_bits=%d\n", bch_error_bits );
        printf("[block:%d, page:%d - %d OOB]=\n\t", block, page, bch_error_bits);
        for (i = 0; i < oob_size; i++)
        {
            printf("%02x ", ra_data[i]);
            if ((i % 16) == 15)
                printf("\n\t");
        }
        printf("\n");
    }
#endif

    //result = fwrite(ra_data, 1, oob_size, fdout);
    gChecksum = calculate_checksum(ra_data, oob_size, gChecksum);
    //if (result == 0)
    //{
    //    printf("ERROR: Fail to write block %d page %d into file, Return code = 0x%x (line %d)\n", block, page, result, __LINE__);
    //    return FAIL;
    //}

#if 0
    if (page == psgoldeninfo->m_i32PagePerBlock - 1)
        printf("	Image for block %d/%d, (%d/%d) done !!\n", block, psgoldeninfo->m_i32BlockNumber - 1, (block - psImgInfo->m_sFwImgInfo.startBlock), (psImgInfo->m_sFwImgInfo.endBlock - psImgInfo->m_sFwImgInfo.startBlock));
#endif

    return OK;
}


int main(int argc, char* argv[])
{
	int n, i;

	/* default primitive polynomials */
	static const unsigned int prim_poly_tab[] = {
		0x25, 0x43, 0x83, 0x11d, 0x211, 0x409, 0x805, 0x1053, 0x201b,
		0x402b, 0x8003, 0x8011, 0x8017, 65533
	};

	for (n = 0; n < (sizeof(prim_poly_tab)/sizeof(unsigned int)); n++) {
		printf(" POLY: %04x\n", prim_poly_tab[n]);
		struct bch_control* bch = bch_init(BCH_N, BCH_T, prim_poly_tab[n], false);
		if (!bch) {
			printf(" Can not initialize bch\n");
			continue;
		}

		for (i = 0; i != SECTORS_PER_PAGE; ++i)
		{
			const uint8_t* sector_data = nand_sample_page + SECTOR_SZ * i;
			{
				// concatenate input data
				uint8_t buffer[SECTOR_SZ + OOB_ECC_OFS + 1];
				buffer[0] = 0;

				memcpy(buffer, sector_data, SECTOR_SZ);
				//memcpy(buffer + SECTOR_SZ, sector_oob, OOB_ECC_OFS);

				// compute ECC
				uint8_t ecc[OOB_ECC_LEN];
				memset(ecc, 0, OOB_ECC_LEN);
				//encode_bch(bch, buffer, SECTOR_SZ + OOB_ECC_OFS + 1, ecc);
				bch_encode(bch, buffer, SECTOR_SZ, ecc);
				for (int j = 0; j < OOB_ECC_LEN; j++)
					printf(" %02x", ecc[j]);
				printf("\n");

				//int res = bch_decode(bch, buffer, SECTOR_SZ, recv_ecc,
				//	sector_oob + OOB_ECC_OFS, NULL, error_loc);
				//printf(" decode: %d\n", res);
				//for (int j = 0; j < BCH_T; j++) {
				//	printf(" %d/%d", error_loc[j] / 8, error_loc[j] % 8);
				//}
				//printf("\n");
			}
		}

		uint8_t test_ecc[OOB_ECC_LEN];
		memset(test_sector, 0, 2048);
		memset(test_sector, 0xff, 512);		
		memset(test_ecc, 0, OOB_ECC_LEN);
		bch_encode(bch, test_sector, /*512*/2048, test_ecc);
		for (int j = 0; j < OOB_ECC_LEN; j++)
			printf(" %02x", test_ecc[j]);
		printf("\n");

		memset(test_sector, 0, 2048);
		memset(test_ecc, 0, OOB_ECC_LEN);
		bch_encode(bch, test_sector, 2048, test_ecc);
		for (int j = 0; j < OOB_ECC_LEN; j++)
			printf(" %02x", test_ecc[j]);
		printf("\n");

		bch_free(bch);
	}

	//DATA_BITS = 4096, T = 3, BITS = 8, GP(2 ^ 13)
	struct bch_control* bch2 = bch_init(10, 4, 0x409, false);

	uint8_t test_ecc[OOB_ECC_LEN];
	memset(test_ecc, 0, OOB_ECC_LEN);
	bch_encode(bch2, test2_bin, 512, test_ecc);
	for (int j = 0; j < OOB_ECC_LEN; j++)
		printf(" %02x", test_ecc[j]);
	printf("\n");

	bch_free(bch2);

    uint8_t data_FFs[512];
    memset(data_FFs, 0xff, 512);
    uint8_t ra_FFs[64];

    calculate_BCH_parity(
        2048,   // page_size
        64,     // oob_size
        4,      // err_bits
        4,      // block
        0,      // page,
        //data_FFs,   // raw_data,
        //nand_sample_page,
        test_bin,
        ra_FFs, // ra_data,
        1   // bch_need_initial
    );

	return 0;
}

